#ifndef FRC_CAN_UTILS
#define FRC_CAN_UTILS 
#include <FRC_CAN.h>

#define FRC_DEV_PIN1 10  // in case we want have multiple devices set jumpers to ground here
#define FRC_DEV_PIN2 11 // these are pulled high by the internal resistor;   
// 10 and 11 were chose because they are in close proximity to ground on the CANBed board  (11 can be grounded wih a standard jumper off and old computer or hard drive))

unsigned long int inCAN_makeBaseID(int devNum);    

unsigned long int  FRC_CAN_init();  // may read jumpers to get device number and call makeBaseID, returns a canId with everything but the api class and api instance set. 

int FRC_CAN_HWmatch(unsigned long int canId, unsigned long  int myID, int *devNum); // checks manuf, device id fields returns 1 if match, does not check device number, but updates devNum if pointer is not NULL.

int FRC_CAN_isMe(unsigned long int canId, unsigned long int myID);  // like HW match but also requires matching device number.

int FRC_CAN_isBroadcast(unsigned long int canId);
// FRC defines device type =0 and manufacturer=0 for broacast messages

int FRC_CAN_handleBroadcast(unsigned long int canId);
// By and large we don't wan user space to be doing things with the broadcast messages
// there's not a lot of "optional" stuff --  especially we want to crash on disable etc
// putting it here means higher level code doesn't have to remember to handle this case
// if this returns, the api index is the return value

int FRC_CAN_isRIO(unsigned long int canId); 
// makes strong assumptions about the IDâ€™s of the control computer

void FRC_CAN_extractClass(unsigned long canId, int *apiClass, int *apiIndex);

unsigned long int FRC_CAN_embed(unsigned long baseID,int apiClass,int apiIndex);

int FRC_CAN_heartBeat(int reset);   // call this with reset = 1 whenever you see a FRC heartbeat go by;  if reset=0 then int should be the state to set onto the onboard LED allowing you to call this every pass through the loop() function and just set the pin.  (All the clock management is handled internally to allow fast/slow blinks.) 

void FRC_CRASH(int pin); // turn on the LED  and go into a loop that never returns.  You must hardware reset or power cycle to get out of this. 

#endif
